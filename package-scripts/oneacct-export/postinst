#!/bin/bash
#
# Perform necessary oneacct-export setup steps
# after package is installed.
#

PROGNAME=$(basename $0)
INSTALLER_DIR=`dirname $0`
DEST_DIR=/opt/oneacct-export
CONFIG_DIR=/etc/oneacct-export
BIN_DIR=/usr/bin
CRON_DIR=/etc/cron.d
INIT_DIR=/etc/init.d

RUN_DIR=/var/run/oneacct-export
LOG_DIR=/var/log/oneacct-export
EXPORTER_CONFIG_FILE=$CONFIG_DIR/conf.yml
SIDEKIQ_CONFIG_FILE=$CONFIG_DIR/sidekiq.yml
APEL_BASE_DIR=/var/spool/apel
APEL_OUT_DIR=$APEL_BASE_DIR/outgoing/00000000

RUBY_VERSION=2.1.0
ONEACCT_VERSION=0.4.5
ONEACCT_NEW_CONFIG_VERSION=0.4

EMBEDDED_GEM_ROOT=$DEST_DIR/embedded/lib/ruby/gems/$RUBY_VERSION/gems/oneacct-export-$ONEACCT_VERSION

function error_exit
{
  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  exit 1
}

# chown
chown -R root:root $DEST_DIR || error_exit "Cannot chown $DEST_DIR to root:root"

# create the apel user
id -u apel > /dev/null 2>&1
if [ "$?" -ne "0" ]; then
  useradd --system --shell /bin/false --home /var/lib/apel --create-home apel || error_exit "Cannot create the apel user account"
  usermod -L apel || error_exit "Cannot lock the apel user account"
fi

# prepare runtime dirs
mkdir -p $RUN_DIR || error_exit "Cannot create $RUN_DIR"
chown apel:apel $RUN_DIR || error_exit "Cannot chown $RUN_DIR to apel:apel"

mkdir -p $LOG_DIR || error_exit "Cannot create $LOG_DIR"
chown apel:apel $LOG_DIR || error_exit "Cannot chown $LOG_DIR to apel:apel"

if [ ! -d "$APEL_BASE_DIR" ]; then
  mkdir -p $APEL_OUT_DIR || error_exit "Cannot create $APEL_OUT_DIR"
  chown -R apel:apel $APEL_BASE_DIR || error_exit "Cannot chown $APEL_BASE_DIR to apel:apel"
fi

# prepare configuration dir
mkdir -p $CONFIG_DIR || error_exit "Cannot create $CONFIG_DIR"
chown root:root $CONFIG_DIR || error_exit "Cannot chown $CONFIG_DIR to root:root"

EXPORTER_CONFIG_FILE_DEST=$EXPORTER_CONFIG_FILE
if [ -f "$EXPORTER_CONFIG_FILE" ]; then
  EXPORTER_CONFIG_FILE_DEST=$EXPORTER_CONFIG_FILE.new
fi
cp $EMBEDDED_GEM_ROOT/config/conf.yml $EXPORTER_CONFIG_FILE_DEST || error_exit "Cannot create $EXPORTER_CONFIG_FILE_DEST"

which rpm > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
  RPM_VERSION=`rpm -q oneacct-export | sort | head -n 1 | grep --color=never -oe"[0-9]\+\.[0-9]\+\.[0-9]\+"`
fi

# copy new version of configuration file if moving through 0.4 version
if [ "x" != "x$2" -a "x$2" \< "x$ONEACCT_NEW_CONFIG_VERSION" ] || [ "$1" != "configure" -a "x$1" \> "x1" -a "x$RPM_VERSION" \< "x$ONEACCT_NEW_CONFIG_VERSION" ]; then
  mv $EXPORTER_CONFIG_FILE $EXPORTER_CONFIG_FILE.old || error_exit "Cannot move $EXPORTER_CONFIG_FILE"
  cp $EMBEDDED_GEM_ROOT/config/conf.yml $EXPORTER_CONFIG_FILE || error_exit "Cannot create $EXPORTER_CONFIG_FILE"
  echo "New configuration file was released. Please modify it according to your needs."
fi

if [ -f "$SIDEKIQ_CONFIG_FILE" ]; then
  SIDEKIQ_CONFIG_FILE=$SIDEKIQ_CONFIG_FILE.new
fi
cp $EMBEDDED_GEM_ROOT/config/sidekiq.yml $SIDEKIQ_CONFIG_FILE || error_exit "Cannot create $SIDEKIQ_CONFIG_FILE"

# symlink bin files into $BIN_DIR
ln -sf $DEST_DIR/bin/oneacct-export $BIN_DIR || error_exit "Cannot link oneacct-export to $BIN_DIR"
ln -sf $EMBEDDED_GEM_ROOT/examples/usr/bin/oneacct-export-cron $BIN_DIR || error_exit "Cannot link oneacct-export-cron to $BIN_DIR"

# set up cron integration
if [ -d "$CRON_DIR" ]; then
  cp $EMBEDDED_GEM_ROOT/examples/etc/cron.d/oneacct-export $CRON_DIR || error_exit "Cannot register oneacct-export in $CRON_DIR"
fi

# set up init scripts
if [ -d "$INIT_DIR" ]; then
  cp $EMBEDDED_GEM_ROOT/examples/etc/init.d/oneacct-export-cron $INIT_DIR || error_exit "Cannot register oneacct-export-cron in $INIT_DIR"
  cp $EMBEDDED_GEM_ROOT/examples/etc/init.d/oneacct-export-sidekiq $INIT_DIR || error_exit "Cannot register oneacct-export-sidekiq in $INIT_DIR"
fi

# adapt configuration example to the current system
sed -i "s/occi\.localhost\.com/$(hostname -f)/g" $EXPORTER_CONFIG_FILE || error_exit "Cannot adapt $EXPORTER_CONFIG_FILE to local configuration"

# restart sidekiq service if running
service oneacct-export-sidekiq status > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
  service oneacct-export-sidekiq restart
fi

echo "Thank you for installing oneacct-export!"

exit 0
